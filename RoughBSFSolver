// BSF rough solver - but this is based on a tester class

import java.util.*;

public class SudokuSolverBFS {
    public static boolean solve(SudokuGraph graph) {
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[81]); // Start with an empty board (0 for empty cells)

        while (!queue.isEmpty()) {
            int[] board = queue.poll();
            int emptyCell = findEmptyCell(board);
            if (emptyCell == -1) {
                // Solution found
                printBoard(board);
                return true;
            }

            for (int value : graph.getPossibleValues(emptyCell)) {
                if (isValidMove(graph, board, emptyCell, value)) {
                    int[] newBoard = board.clone();
                    newBoard[emptyCell] = value;
                    queue.add(newBoard);
                }
            }
        }
        return false; // No solution found
    }

    private static int findEmptyCell(int[] board) {
        for (int i = 0; i < board.length; i++) {
            if (board[i] == 0) return i;
        }
        return -1;
    }

    private static boolean isValidMove(SudokuGraph graph, int[] board, int cell, int value) {
        for (int neighbor : graph.getNeighbors(cell)) {
            if (board[neighbor] == value) return false;
        }
        return true;
    }

    private static void printBoard(int[] board) {
        for (int i = 0; i < board.length; i++) {
            System.out.print(board[i] + " ");
            if ((i + 1) % 9 == 0) System.out.println();
        }
    }
}
